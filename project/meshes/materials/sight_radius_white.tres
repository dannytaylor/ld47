[gd_resource type="ShaderMaterial" load_steps=10 format=2]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "vertex"

[sub_resource type="VisualShaderNodeInput" id=2]
input_name = "camera"

[sub_resource type="VisualShaderNodeTransformVecMult" id=3]

[sub_resource type="VisualShaderNodeVectorDistance" id=4]

[sub_resource type="VisualShaderNodeVec3Uniform" id=5]
uniform_name = "SourcePosition"

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "MaxDistance"

[sub_resource type="VisualShaderNodeCompare" id=7]
output_port_for_preview = 0
function = 5

[sub_resource type="VisualShaderNodeColorUniform" id=8]
output_port_for_preview = 0
uniform_name = "Color"

[sub_resource type="VisualShader" id=9]
code = "shader_type spatial;
render_mode cull_disabled, specular_schlick_ggx;

uniform vec4 Color : hint_color;
uniform vec3 SourcePosition;
uniform float MaxDistance;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:9
	vec3 n_out9p0 = Color.rgb;
	float n_out9p1 = Color.a;

// VectorUniform:6
	vec3 n_out6p0 = SourcePosition;

// Input:3
	mat4 n_out3p0 = CAMERA_MATRIX;

// Input:2
	vec3 n_out2p0 = VERTEX;

// TransformVectorMult:4
	vec3 n_out4p0 = (n_out3p0 * vec4(n_out2p0, 1.0)).xyz;

// Distance:5
	float n_out5p0 = distance(n_out6p0, n_out4p0);

// ScalarUniform:7
	float n_out7p0 = MaxDistance;

// Compare:8
	bool n_out8p0 = n_out5p0<=n_out7p0;

// Output:0
	ALBEDO = n_out9p0;
	ALPHA = n_out8p0 ? 1.0 : 0.0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -725.5, -166.5 )
modes/cull = 2
nodes/fragment/0/position = Vector2( 520, -60 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -520, 300 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -520, 200 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -320, 220 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -60, 160 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -300, 80 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -80, 340 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( 160, 180 )
nodes/fragment/9/node = SubResource( 8 )
nodes/fragment/9/position = Vector2( 180, -120 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 2, 0, 4, 1, 4, 0, 5, 1, 6, 0, 5, 0, 5, 0, 8, 0, 7, 0, 8, 1, 9, 0, 0, 0, 8, 0, 0, 1 )

[resource]
resource_name = "Player Sight Material"
shader = SubResource( 9 )
shader_param/Color = Color( 1, 1, 1, 1 )
shader_param/SourcePosition = Vector3( 0, 0, 0 )
shader_param/MaxDistance = 0.0
