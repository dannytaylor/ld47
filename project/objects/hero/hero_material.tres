[gd_resource type="ShaderMaterial" load_steps=7 format=2]

[sub_resource type="VisualShaderNodeColorConstant" id=2]

[sub_resource type="VisualShaderNodeColorConstant" id=3]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeExpression" id=4]
size = Vector2( 784, 207 )
expression = "float depth = textureLod(DEPTH_TEXTURE, SCREEN_UV, 0.0).r;
vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0, depth*2.0-1.0, 1.0);
pixel_position = upos.xyz / upos.w;"

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "depth_texture"

[sub_resource type="VisualShaderNodeVectorInterp" id=6]
output_port_for_preview = 0

[sub_resource type="VisualShader" id=1]
code = "shader_type spatial;
render_mode specular_schlick_ggx, unshaded;




void vertex() {
// Output:0

}

void fragment() {
// Color:2
	vec3 n_out2p0 = vec3(1.000000, 1.000000, 1.000000);
	float n_out2p1 = 1.000000;

// Color:3
	vec3 n_out3p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out3p1 = 1.000000;

// Input:5

// Expression:4
	vec3 n_out4p0;
	n_out4p0 = vec3(0.0, 0.0, 0.0);
	{
		float depth = textureLod(DEPTH_TEXTURE, SCREEN_UV, 0.0).r;
		vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0, depth*2.0-1.0, 1.0);
		n_out4p0 = upos.xyz / upos.w;
	}

// VectorMix:6
	vec3 n_out6p0 = mix(n_out2p0, n_out3p0, n_out4p0);

// Output:0
	ALBEDO = n_out6p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -815.561, 14.25 )
flags/unshaded = true
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -600, 100 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -600, 180 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -820, 400 )
nodes/fragment/4/size = Vector2( 784, 207 )
nodes/fragment/4/input_ports = "0,4,DEPTH_TEXTURE;"
nodes/fragment/4/output_ports = "0,1,pixel_position;"
nodes/fragment/4/expression = "float depth = textureLod(DEPTH_TEXTURE, SCREEN_UV, 0.0).r;
vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0, depth*2.0-1.0, 1.0);
pixel_position = upos.xyz / upos.w;"
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -1060, 400 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -360, 100 )
nodes/fragment/connections = PoolIntArray( 5, 0, 4, 0, 2, 0, 6, 0, 3, 0, 6, 1, 4, 0, 6, 2, 6, 0, 0, 0 )

[resource]
shader = SubResource( 1 )
